
group cars
{
    normal _x: 1 _+_ 1;
    different _f: 2.12;

}

group animals
{
    decision _ok:false;
    
    func prim(normal _numar) -> decision
    {
        different _ff:1.2;
        give true;
    }
}

normal _z:10;
normal _y:20;
decision _k:false;

func par(normal _num, unique _c) -> normal
{
    normal _num:12;
    give _num;  
}

main_start
    
    normal _b: 3 _+_ 4;
    _const_ unique _c:<a>;
    normal _nr:2;
    unique _var; 
    _var:<i>;
    _const_ special _sir:<<Salut>>;
    normal _i:1;
    decision _OK:false;
    unique _C:<a>;

    _for_(_i:1;_i leq 5;_i:10)
    {
        _i:2;
    }

    _const_ different _eE:3.4;

    _if_ (_nr eq _num)
    {
        _const_ different _F:10.4;
        _loop_
        {
            _nr:5;
        }
    }
    _else_if_ (_nr leq _num)
    {
        special _s:<<Hello>>; 
    }
    _else_
    {
        _while_ (_i neq 10)
        {
            unique _char:<z>;
            _OK:true; 
            _if_ ((_OK leq 4) eq (_num neq (_nr _+_ _i)))
            {
                _stop_;
            }
        }
    }

    normal _j: 3 _+_ 4 _*_ (5 _/_ 10);
    par(Eval(4), _num);
    
    decision _test: ((3 neq 2) eq (10 great 2)) _&_ (3 neq (3 _+_ 1));
    
    give 1;

main_stop